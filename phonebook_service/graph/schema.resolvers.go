package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/phonebook-project/graph/model"
	"github.com/phonebook-project/models"
	"github.com/phonebook-project/repository"
	"github.com/phonebook-project/services"
)

// CreateContact is the resolver for the createContact field.
func (r *mutationResolver) CreateContact(ctx context.Context, id string, name string, phones []string, notes *string, email string) (*model.Contact, error) {
	contact := models.Contact{
		Id:     id,
		Name:   name,
		Phones: phones,
		Notes:  *notes,
		Email:  email,
	}
	output, err := services.CreateContact(&repository.Repo{Collection: r.Collection, Ctx: r.Ctx}, contact)
	if err != nil {
		return nil, err
	}
	return &model.Contact{ID: output.Id, Name: output.Name, Phones: output.Phones, Notes: &output.Notes, Email: output.Email}, nil
}

// MergeContacts is the resolver for the mergeContacts field.
func (r *mutationResolver) MergeContacts(ctx context.Context, emailOne string, emailTwo string) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: MergeContacts - mergeContacts"))
}

// UpdateContact is the resolver for the updateContact field.
func (r *mutationResolver) UpdateContact(ctx context.Context, id string, name string, phones []string, email string, notes string) (*model.Contact, error) {
	contact := models.Contact{
		Id:     id,
		Name:   name,
		Phones: phones,
		Notes:  notes,
		Email:  email,
	}
	output, err := services.UpdateContact(&repository.Repo{Collection: r.Collection, Ctx: r.Ctx}, contact)
	if err != nil {
		return nil, err
	}
	return &model.Contact{ID: output.Id, Name: output.Name, Phones: output.Phones, Notes: &output.Notes, Email: output.Email}, nil
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, email string) (bool, error) {
	return services.DeleteContact(&repository.Repo{Collection: r.Collection, Ctx: r.Ctx}, email)
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context) ([]*model.Contact, error) {
	resp, err := services.Contacts(&repository.Repo{Collection: r.Collection, Ctx: r.Ctx})
	if err != nil {
		return nil, err
	}
	var out []*model.Contact

	for _, contact := range resp {
		out = append(out, &model.Contact{ID: contact.Id, Name: contact.Name, Phones: contact.Phones, Notes: &contact.Notes, Email: contact.Email})
	}

	return out, nil
}

// Contact is the resolver for the contact field.
func (r *queryResolver) Contact(ctx context.Context, id *string, name *string, phone *string, email *string) (*model.Contact, error) {
	output, err := services.Contact(&repository.Repo{Collection: r.Collection, Ctx: r.Ctx}, *name, *phone, *email, *id)
	if err != nil {
		return nil, err
	}
	return &model.Contact{ID: output.Id, Name: output.Name, Phones: output.Phones, Notes: &output.Notes, Email: output.Email}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
